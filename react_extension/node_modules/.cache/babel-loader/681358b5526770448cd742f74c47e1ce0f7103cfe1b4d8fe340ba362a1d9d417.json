{"ast":null,"code":"var _jsxFileName = \"E:\\\\react_extension\\\\src\\\\components\\\\1_setState\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Demo1 extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 0\n    };\n    /*  对象式的setState   \r\n        add=()=>{\r\n            const {count}=this.state\r\n            this.setState({count:count+1},()=>{\r\n                console.log(\"10行的输出:\",this.state.count);//此回调所调用的时间是setState更新和页面render更新完毕后才调用\r\n            })//setState是一个同步的方法，但是setState()引起的state的更新是异步的，\r\n            因为每次调用setState都会触发更新，异步操作是为了提高性能，将多个状态合并一起更新，减少render调用。\r\n        }\r\n     */\n    this.add = () => {\n      // 函数式式的setState\n      this.setState(state => ({\n        count: state.count + 1\n      }));\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"\\u5F53\\u524D\\u6C42\\u548C\\u4E3A\\uFF1A\", this.state.count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.add,\n        children: \"\\u70B9\\u6211+1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","Demo1","constructor","args","state","count","add","setState","render","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick"],"sources":["E:/react_extension/src/components/1_setState/index.jsx"],"sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Demo1 extends Component {\r\n\r\n    state={count:0}\r\n\r\n/*  对象式的setState   \r\n    add=()=>{\r\n        const {count}=this.state\r\n        this.setState({count:count+1},()=>{\r\n            console.log(\"10行的输出:\",this.state.count);//此回调所调用的时间是setState更新和页面render更新完毕后才调用\r\n        })//setState是一个同步的方法，但是setState()引起的state的更新是异步的，\r\n        因为每次调用setState都会触发更新，异步操作是为了提高性能，将多个状态合并一起更新，减少render调用。\r\n    }\r\n */\r\n\r\n    add=()=>{\r\n        // 函数式式的setState\r\n        this.setState(state=>({count:state.count+1}))\r\n    }\r\n\r\n \r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>当前求和为：{this.state.count}</h1>\r\n        <button onClick={this.add}>点我+1</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExC,eAAe,MAAMC,KAAK,SAASH,SAAS,CAAC;EAAAI,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KAEzCC,KAAK,GAAC;MAACC,KAAK,EAAC;IAAC,CAAC;IAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IARA,KAUIC,GAAG,GAAC,MAAI;MACJ;MACA,IAAI,CAACC,QAAQ,CAACH,KAAK,KAAG;QAACC,KAAK,EAACD,KAAK,CAACC,KAAK,GAAC;MAAC,CAAC,CAAC,CAAC;IACjD,CAAC;EAAA;EAKHG,MAAMA,CAAA,EAAG;IACP,oBACER,OAAA;MAAAS,QAAA,gBACET,OAAA;QAAAS,QAAA,GAAI,sCAAM,EAAC,IAAI,CAACL,KAAK,CAACC,KAAK;MAAA;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACjCb,OAAA;QAAQc,OAAO,EAAE,IAAI,CAACR,GAAI;QAAAG,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC;EAEV;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}