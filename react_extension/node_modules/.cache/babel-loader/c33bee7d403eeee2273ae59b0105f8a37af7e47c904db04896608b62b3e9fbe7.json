{"ast":null,"code":"var _jsxFileName = \"E:\\\\react_extension\\\\src\\\\components\\\\3_hooks\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\n// import ReactDOM from 'react-dom'\nimport { root } from '../../index';\n\n// 类式组件写法： \n/* class Demo extends React.Component {\r\n\r\n    state={count:0}\r\n\r\n    myRef=React.createRef()\r\n\r\n    add=()=>{\r\n        // 函数式式的setState\r\n        this.setState(state=>({count:state.count+1}))\r\n    }\r\n\r\n    show=()=>{\r\n        alert(this.myRef.current.value)\r\n    }\r\n\r\n    unmount=()=>{\r\n        //旧版写法：\r\n        // ReactDOM.unmountComponentAtNode(document.getElementById('root'))\r\n        //新版写法：\r\n        root.unmount();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.timer=setInterval(()=>{\r\n            this.setState(state=>({count:state.count+1}))\r\n        },1000)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.timer);\r\n    }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input type=\"text\" ref={this.myRef}/>\r\n        <h1>当前求和为：{this.state.count}</h1>\r\n        <button onClick={this.add}>点我+1</button>\r\n        <button onClick={this.unmount}>删除</button>\r\n        <button onClick={this.show}>点击提示数据</button>\r\n      </div>\r\n    )\r\n  }\r\n} */\n\n//函数式组件写法：\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Demo() {\n  _s();\n  const [count, setCount] = useState(0);\n  const [name, setName] = useState('tom');\n  const myRef = useRef(null);\n  function add() {\n    // setCount(count+1) 第一种写法\n    setCount(count => count + 1); //第二种写法\n  }\n\n  function changeName() {\n    // setName('jerry')\n    setName(name => 'jerry');\n  }\n  function unmount() {\n    root.unmount();\n  }\n  function show() {\n    alert();\n  }\n\n  //这个方法相当于是componentDidMount和compoentWillUpdata和componentWillUnmount的三者结合\n  useEffect(() => {\n    let timer = setInterval(() => {\n      setCount(count => count + 1);\n    }, 1000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: myRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"\\u5F53\\u524D\\u6C42\\u548C\\u4E3A\\uFF1A\", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"\\u6211\\u7684\\u540D\\u5B57\\u662F\\uFF1A\", name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: add,\n      children: \"\\u70B9\\u6211+1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: changeName,\n      children: \"\\u70B9\\u6211\\u6539\\u540D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: unmount,\n      children: \"\\u5378\\u8F7D\\u7EC4\\u4EF6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: show,\n      children: \"\\u70B9\\u51FB\\u63D0\\u793A\\u6570\\u636E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n}\n_s(Demo, \"Kry0/IM14wfoKsvqdFAaxsSjCbY=\");\n_c = Demo;\nexport default Demo;\nvar _c;\n$RefreshReg$(_c, \"Demo\");","map":{"version":3,"names":["React","useState","useEffect","useRef","root","jsxDEV","_jsxDEV","Demo","_s","count","setCount","name","setName","myRef","add","changeName","unmount","show","alert","timer","setInterval","clearInterval","children","type","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["E:/react_extension/src/components/3_hooks/index.jsx"],"sourcesContent":["import React, { useState,useEffect,useRef} from 'react'\r\n// import ReactDOM from 'react-dom'\r\nimport {root} from '../../index'\r\n\r\n// 类式组件写法： \r\n/* class Demo extends React.Component {\r\n\r\n    state={count:0}\r\n\r\n    myRef=React.createRef()\r\n\r\n    add=()=>{\r\n        // 函数式式的setState\r\n        this.setState(state=>({count:state.count+1}))\r\n    }\r\n\r\n    show=()=>{\r\n        alert(this.myRef.current.value)\r\n    }\r\n\r\n    unmount=()=>{\r\n        //旧版写法：\r\n        // ReactDOM.unmountComponentAtNode(document.getElementById('root'))\r\n        //新版写法：\r\n        root.unmount();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.timer=setInterval(()=>{\r\n            this.setState(state=>({count:state.count+1}))\r\n        },1000)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.timer);\r\n    }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input type=\"text\" ref={this.myRef}/>\r\n        <h1>当前求和为：{this.state.count}</h1>\r\n        <button onClick={this.add}>点我+1</button>\r\n        <button onClick={this.unmount}>删除</button>\r\n        <button onClick={this.show}>点击提示数据</button>\r\n      </div>\r\n    )\r\n  }\r\n} */\r\n\r\n//函数式组件写法：\r\nfunction Demo(){\r\n\r\n    const [count,setCount]=useState(0)\r\n    const [name,setName]=useState('tom')\r\n    const myRef=useRef(null)\r\n\r\n    function add(){\r\n        // setCount(count+1) 第一种写法\r\n        setCount(count=>count+1) //第二种写法\r\n    }\r\n\r\n    function changeName(){\r\n        // setName('jerry')\r\n        setName( name =>'jerry')\r\n    }\r\n\r\n    function unmount(){\r\n        root.unmount();  \r\n    }\r\n\r\n    function show(){\r\n        alert()\r\n    }\r\n\r\n    //这个方法相当于是componentDidMount和compoentWillUpdata和componentWillUnmount的三者结合\r\n    useEffect(()=>{\r\n        let timer=setInterval(()=>{\r\n            setCount(count=>count+1)\r\n        },1000)\r\n        return ()=>{\r\n            clearInterval(timer);\r\n        }\r\n    },[])\r\n    \r\n    return (\r\n        <div>\r\n            <input type=\"text\" ref={myRef}/>\r\n            <h2>当前求和为：{count}</h2>\r\n            <h2>我的名字是：{name}</h2>\r\n            <button onClick={add}>点我+1</button>\r\n            <button onClick={changeName}>点我改名</button>\r\n            <button onClick={unmount}>卸载组件</button>\r\n            <button onClick={show}>点击提示数据</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Demo"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}