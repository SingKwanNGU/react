{"ast":null,"code":"var _jsxFileName = \"E:\\\\react_extension\\\\src\\\\components\\\\3_hooks\\\\index.jsx\";\nimport React, { useState, useEffect } from 'react';\n// import ReactDOM from 'react-dom'\nimport { root } from '../../index';\n\n// 类式组件写法： \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Demo extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 0\n    };\n    this.myRef = add = () => {\n      // 函数式式的setState\n      this.setState(state => ({\n        count: state.count + 1\n      }));\n    };\n    this.unmount = () => {\n      //旧版写法：\n      // ReactDOM.unmountComponentAtNode(document.getElementById('root'))\n      //新版写法：\n      root.unmount();\n    };\n  }\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      this.setState(state => ({\n        count: state.count + 1\n      }));\n    }, 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: this.myRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"\\u5F53\\u524D\\u6C42\\u548C\\u4E3A\\uFF1A\", this.state.count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.add,\n        children: \"\\u70B9\\u6211+1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.unmount,\n        children: \"\\u5220\\u9664\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.show,\n        children: \"\\u70B9\\u51FB\\u63D0\\u793A\\u6570\\u636E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n//函数式组件写法：\n/* function Demo(){\r\n\r\n    const [count,setCount]=useState(0)\r\n    const [name,setName]=useState('tom')\r\n\r\n    function add(){\r\n        // setCount(count+1) 第一种写法\r\n        setCount(count=>count+1) //第二种写法\r\n    }\r\n\r\n    function changeName(){\r\n        // setName('jerry')\r\n        setName( name =>'jerry')\r\n    }\r\n\r\n    function unmount(){\r\n        root.unmount();  \r\n    }\r\n\r\n    //这个方法相当于是componentDidMount和compoentWillUpdata和componentWillUnmount的三者结合\r\n\r\n    useEffect(()=>{\r\n        let timer=setInterval(()=>{\r\n            setCount(count=>count+1)\r\n        },1000)\r\n        return ()=>{\r\n            clearInterval(timer);\r\n        }\r\n    },[])\r\n    \r\n    return (\r\n        <div>\r\n            <h2>当前求和为：{count}</h2>\r\n            <h2>我的名字是：{name}</h2>\r\n            <button onClick={add}>点我+1</button>\r\n            <button onClick={changeName}>点我改名</button>\r\n            <button onClick={unmount}>卸载组件</button>\r\n        </div>\r\n    )\r\n} */\n\nexport default Demo;","map":{"version":3,"names":["React","useState","useEffect","root","jsxDEV","_jsxDEV","Demo","Component","constructor","args","state","count","myRef","add","setState","unmount","componentDidMount","timer","setInterval","componentWillUnmount","clearInterval","render","children","type","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","show"],"sources":["E:/react_extension/src/components/3_hooks/index.jsx"],"sourcesContent":["import React, { useState,useEffect} from 'react'\r\n// import ReactDOM from 'react-dom'\r\nimport {root} from '../../index'\r\n\r\n// 类式组件写法： \r\nclass Demo extends React.Component {\r\n\r\n    state={count:0}\r\n\r\n    myRef=\r\n\r\n    add=()=>{\r\n        // 函数式式的setState\r\n        this.setState(state=>({count:state.count+1}))\r\n    }\r\n\r\n    unmount=()=>{\r\n        //旧版写法：\r\n        // ReactDOM.unmountComponentAtNode(document.getElementById('root'))\r\n        //新版写法：\r\n        root.unmount();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.timer=setInterval(()=>{\r\n            this.setState(state=>({count:state.count+1}))\r\n        },1000)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.timer);\r\n    }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input type=\"text\" ref={this.myRef}/>\r\n        <h1>当前求和为：{this.state.count}</h1>\r\n        <button onClick={this.add}>点我+1</button>\r\n        <button onClick={this.unmount}>删除</button>\r\n        <button onClick={this.show}>点击提示数据</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//函数式组件写法：\r\n/* function Demo(){\r\n\r\n    const [count,setCount]=useState(0)\r\n    const [name,setName]=useState('tom')\r\n\r\n    function add(){\r\n        // setCount(count+1) 第一种写法\r\n        setCount(count=>count+1) //第二种写法\r\n    }\r\n\r\n    function changeName(){\r\n        // setName('jerry')\r\n        setName( name =>'jerry')\r\n    }\r\n\r\n    function unmount(){\r\n        root.unmount();  \r\n    }\r\n\r\n    //这个方法相当于是componentDidMount和compoentWillUpdata和componentWillUnmount的三者结合\r\n\r\n    useEffect(()=>{\r\n        let timer=setInterval(()=>{\r\n            setCount(count=>count+1)\r\n        },1000)\r\n        return ()=>{\r\n            clearInterval(timer);\r\n        }\r\n    },[])\r\n    \r\n    return (\r\n        <div>\r\n            <h2>当前求和为：{count}</h2>\r\n            <h2>我的名字是：{name}</h2>\r\n            <button onClick={add}>点我+1</button>\r\n            <button onClick={changeName}>点我改名</button>\r\n            <button onClick={unmount}>卸载组件</button>\r\n        </div>\r\n    )\r\n} */\r\n\r\nexport default Demo"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAACC,SAAS,QAAO,OAAO;AAChD;AACA,SAAQC,IAAI,QAAO,aAAa;;AAEhC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,IAAI,SAASN,KAAK,CAACO,SAAS,CAAC;EAAAC,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KAE/BC,KAAK,GAAC;MAACC,KAAK,EAAC;IAAC,CAAC;IAAA,KAEfC,KAAK,GAELC,GAAG,GAACA,CAAA,KAAI;MACJ;MACA,IAAI,CAACC,QAAQ,CAACJ,KAAK,KAAG;QAACC,KAAK,EAACD,KAAK,CAACC,KAAK,GAAC;MAAC,CAAC,CAAC,CAAC;IACjD,CAAC;IAAA,KAEDI,OAAO,GAAC,MAAI;MACR;MACA;MACA;MACAZ,IAAI,CAACY,OAAO,CAAC,CAAC;IAClB,CAAC;EAAA;EAEDC,iBAAiBA,CAAA,EAAE;IACf,IAAI,CAACC,KAAK,GAACC,WAAW,CAAC,MAAI;MACvB,IAAI,CAACJ,QAAQ,CAACJ,KAAK,KAAG;QAACC,KAAK,EAACD,KAAK,CAACC,KAAK,GAAC;MAAC,CAAC,CAAC,CAAC;IACjD,CAAC,EAAC,IAAI,CAAC;EACX;EAEAQ,oBAAoBA,CAAA,EAAE;IAClBC,aAAa,CAAC,IAAI,CAACH,KAAK,CAAC;EAC7B;EAGFI,MAAMA,CAAA,EAAG;IACP,oBACEhB,OAAA;MAAAiB,QAAA,gBACEjB,OAAA;QAAOkB,IAAI,EAAC,MAAM;QAACC,GAAG,EAAE,IAAI,CAACZ;MAAM;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eACrCvB,OAAA;QAAAiB,QAAA,GAAI,sCAAM,EAAC,IAAI,CAACZ,KAAK,CAACC,KAAK;MAAA;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACjCvB,OAAA;QAAQwB,OAAO,EAAE,IAAI,CAAChB,GAAI;QAAAS,QAAA,EAAC;MAAI;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACxCvB,OAAA;QAAQwB,OAAO,EAAE,IAAI,CAACd,OAAQ;QAAAO,QAAA,EAAC;MAAE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC1CvB,OAAA;QAAQwB,OAAO,EAAE,IAAI,CAACC,IAAK;QAAAR,QAAA,EAAC;MAAM;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC;EAEV;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAetB,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}