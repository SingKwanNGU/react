{"ast":null,"code":"/*\r\n    1.该文件是用于创建一个为Count组件服务的reducer,reducer的本质就是一个函数\r\n    2.reducer函数会接收到两个参数，分别为 之前的状态(previousState),动作对象(action)\r\n*/\nimport { INCREMENT, DECREMENT } from \"./constant\";\nconst initState = 0;\nexport default function countReducer(previousState = initState, action) {\n  // console.log(previousState);\n  //从action对象中获取type和data\n  const {\n    type,\n    data\n  } = action;\n  //根据type决定如何处理数据\n  switch (type) {\n    case INCREMENT:\n      return previousState + data;\n    case DECREMENT:\n      return previousState - data;\n    default:\n      return previousState;\n  }\n}","map":{"version":3,"names":["INCREMENT","DECREMENT","initState","countReducer","previousState","action","type","data"],"sources":["E:/redux_learning/src/redux/count_reducer.js"],"sourcesContent":["/*\r\n    1.该文件是用于创建一个为Count组件服务的reducer,reducer的本质就是一个函数\r\n    2.reducer函数会接收到两个参数，分别为 之前的状态(previousState),动作对象(action)\r\n*/ \r\nimport { INCREMENT,DECREMENT } from \"./constant\";\r\n\r\nconst initState=0\r\nexport default function countReducer(previousState=initState,action){\r\n    // console.log(previousState);\r\n    //从action对象中获取type和data\r\n    const {type,data}=action\r\n    //根据type决定如何处理数据\r\n    switch (type) {\r\n        case INCREMENT:\r\n            return previousState + data\r\n        case DECREMENT:\r\n            return previousState - data    \r\n    \r\n        default:\r\n            return previousState\r\n    }\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,SAAS,EAACC,SAAS,QAAQ,YAAY;AAEhD,MAAMC,SAAS,GAAC,CAAC;AACjB,eAAe,SAASC,YAAYA,CAACC,aAAa,GAACF,SAAS,EAACG,MAAM,EAAC;EAChE;EACA;EACA,MAAM;IAACC,IAAI;IAACC;EAAI,CAAC,GAACF,MAAM;EACxB;EACA,QAAQC,IAAI;IACR,KAAKN,SAAS;MACV,OAAOI,aAAa,GAAGG,IAAI;IAC/B,KAAKN,SAAS;MACV,OAAOG,aAAa,GAAGG,IAAI;IAE/B;MACI,OAAOH,aAAa;EAC5B;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}